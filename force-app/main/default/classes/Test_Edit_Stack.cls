@istest
Public class Test_Edit_Stack{
    Public static i8Constants i8 = new I8Constants();
    @testSetup static void setup() {
        SOEUtility.SystemSettings_Insert();
        Department__c service = SOEUtility.Dep_Insert('Service2');
        Role__c  Role = SOEUtility.Role_Insert('Imp Manager');
        SOE__c SOE = SOEUtility.SOE_Insert('SOE Edit Stack 1',service.id,true,true,false,false);  
        SOE__c SOE1 = SOEUtility.SOE_Insert('SOE Edit Stack 2',service.id,true,true,false,false); 
        System.assertEquals(SOE.SOE_Title__c , 'SOE Edit Stack 1');        
    }
    Static testmethod void Edit_Stack_Cntrl(){
            SOE__c soe = [select id,SOE_Title__c from SOE__c where SOE_Title__c ='SOE Edit Stack 1'];     
            System.assertEquals(SOE.SOE_Title__c , 'SOE Edit Stack 1');
            list<task__c> Tas = [select id,name,Task_Title__c,SOE__c,ID_Text__c,Stage_Level__c,Stage__c,Team__c,Stack_Owner_Name__c from task__c where SOE__c =: SOE.id and Is_Stack__c =: True and Stage__c =: i8.STAGE_PRE];
            ApexPages.CurrentPage().getparameters().put('Id', TAS[0].Id);
            Edit_Stack_Cntrl ES = New Edit_Stack_Cntrl();
            ES.getFromStackList();
            ES.getToStackList(); 
            ES.getTasks();
            ES.fromStackChanged();
            ES.toStackChanged();  
            ES.getRows();            
        Test.StartTest();
            ES.SelectAction ='Append';
            ES.selectRow =5;
            ES.Go_method(); 
            ES.WrapperList[1].task.Task_Title__c = 'T1';
            ES.WrapperList[2].task.Task_Title__c = 'T2';
            ES.WrapperList[3].task.Task_Title__c = 'T3';
            ES.WrapperList[4].task.Task_Title__c = 'T4';
            ES.WrapperList[5].task.Task_Title__c = 'T5';
            ES.WrapperList[1].task.Minutes__c = 61;
            ES.Apply_action();
            ES.WrapperList[1].task.Minutes__c = 2;
            ES.WrapperList[1].task.Hours__c = 30;
            ES.Apply_action();
            ES.WrapperList[1].task.Minutes__c = null;
            ES.WrapperList[1].task.Days__c = null;
            ES.WrapperList[1].task.Hours__c = null;
            ES.Apply_action();
            ES.getTableRows();
            ES.getnxt();  
            ES.getprev();  
            ES.End();
            ES.previous();
            ES.beginning();
            ES.next();
            ES.SelectAll = true;
            ES.SelectAllCheckbox();
            ES.SelectAll = false;
            ES.SelectAllCheckbox();
            ES.OpenDependency();      
            ES.openDocuments();
            ES = New Edit_Stack_Cntrl();
             Test.StopTest();
            ES.WrapperList[2].task.Link__c = false;
            ES.WrapperList[2].task.Jump__c = true;
            ES.Apply_action();           
            ES.SelectAction  = 'Delete_Selected';
            ES.Go_method();
            ES.WrapperList[2].Check = true;
            ES.Go_method();
            ES.SelectAll = true;
            ES.SelectAllCheckbox();
            ES.SelectAction  = 'Delete_Selected';
            ES.Go_method(); 
            ES.Cancel_action();
    }
    Static testmethod void Edit_Stack_Cntrl2(){
            SOE__c soe = [select id,SOE_Title__c from SOE__c where SOE_Title__c ='SOE Edit Stack 1'];     
            System.assertEquals(SOE.SOE_Title__c , 'SOE Edit Stack 1');
            list<task__c> Tas = [select id,name,Task_Title__c,SOE__c,ID_Text__c,Stage_Level__c,Stage__c,Team__c,Stack_Owner_Name__c from task__c where SOE__c =: SOE.id and Is_Stack__c =: True and Stage__c =: i8.STAGE_PRE];
            ApexPages.CurrentPage().getparameters().put('Id', TAS[0].Id);
            Edit_Stack_Cntrl ES = New Edit_Stack_Cntrl();
            ES.getTasks();           
            ES.SelectAction = 'Copy_Selected'; 
            ES.Go_method();
            ES.WrapperList[0].Check = true;
            ES.SelectAction = 'Copy_Selected'; 
            ES.Selecttask ='1.1';
            ES.Go_method();
        Test.StartTest();
            ES.WrapperList[1].task.Link__c = true;
            ES.Apply_Action();
            ES.getTasks();
            ES.WrapperList[0].Check = true;
            ES.SelectAction = 'Copy_Selected'; 
            ES.Selecttask ='1.2';
            ES.Go_method();
            ES.SelectAction = 'Move_Selected'; 
            ES.Selecttask ='1.2';
            ES.Go_method();            
            ES.WrapperList[1].task.Link__c = true;
        Test.StopTest();
            ES.Apply_Action();
            ES.WrapperList[1].Check = true;
            ES.SelectAction = 'Move_Selected'; 
            ES.Selecttask ='1.2';
            ES.Go_method();
            ES.SelectAll = true;
            ES.SelectAllCheckbox();
            ES.SelectAction  = 'Move_Selected';
            ES.Go_method();  
    }
    Static testmethod void Edit_Stack_Cntrl3(){
        Test.StartTest();
             SOE__c soe = [select id,SOE_Title__c from SOE__c where SOE_Title__c ='SOE Edit Stack 1'];     
            System.assertEquals(SOE.SOE_Title__c , 'SOE Edit Stack 1');
            list<task__c> Tas = [select id,name,Task_Title__c,SOE__c,ID_Text__c,Stage_Level__c,Stage__c,Team__c,Stack_Owner_Name__c from task__c where SOE__c =: SOE.id and Is_Stack__c =: True and Stage__c =: i8.STAGE_PRE];
            ApexPages.CurrentPage().getparameters().put('Id', TAS[0].Id);
            Edit_Stack_Cntrl ES = New Edit_Stack_Cntrl();
            ES.getTasks(); 
             ES.SelectAction ='Append';
            ES.selectRow =5;
            ES.Go_method(); 
            ES.WrapperList[1].task.Task_Title__c = 'T1';
            ES.WrapperList[2].task.Task_Title__c = 'T2';
            ES.WrapperList[3].task.Task_Title__c = 'T3';
            ES.WrapperList[4].task.Task_Title__c = 'T4';
            ES.Apply_action();
            ES.WrapperList[1].task.Link__c = false;
            ES.Apply_action();
            Tas = [select id,name,Task_Title__c,SOE__c,Stage_Level__c,Stage__c,Team__c,Stack_Owner_Name__c from task__c where SOE__c =: SOE.id and Stage__c =: i8.STAGE_PRE  order by Id_Before_Decimal__c,Id_After_Decimal__c];
            list<Dependency__c> DepList1 = new list<Dependency__c>();
            DepList1.add(SOEUtility.Dependency_Insert(i8.INTERNALDEP,tas[2].Id,tas[2].SOE__c,tas[1].Id,tas[1].SOE__c,i8.PREDECESSOR));
            DepList1.add(SOEUtility.Dependency_Insert(i8.INTERNALDEP,tas[1].Id,tas[1].SOE__c,tas[2].Id,tas[2].SOE__c,i8.SUCCESSOR));
            insert deplist1;
            tas[2].Dependency_Type__c = i8.INTERNALDEP;
            update tas[2];
            ES.Tasks();
            ES.getTasks();
            ES.WrapperList[1].Check = true;
            ES.SelectAction = 'Move_Selected'; 
            ES.Selecttask ='1.5';
            ES.Go_method();
            ES.WrapperList[1].task.Link__c = true;
            ES.Apply_action();            
           
       Test.StopTest();
    }           
     Static testmethod void Edit_Stack_Cntrl4(){
            SOE__c soe = [select id,SOE_Title__c from SOE__c where SOE_Title__c ='SOE Edit Stack 1'];     
            System.assertEquals(SOE.SOE_Title__c , 'SOE Edit Stack 1');
            list<task__c> Tas = [select id,name,Task_Title__c,SOE__c,ID_Text__c,Stage_Level__c,Stage__c,Team__c,Stack_Owner_Name__c from task__c where SOE__c =: SOE.id and Is_Stack__c =: True and Stage__c =: i8.STAGE_PRE];
            ApexPages.CurrentPage().getparameters().put('Id', TAS[0].Id);
            Edit_Stack_Cntrl ES = New Edit_Stack_Cntrl();
            ES.getTasks(); 
             ES.SelectAction ='Append';
            ES.selectRow =5;
            ES.Go_method(); 
            ES.WrapperList[1].task.Task_Title__c = 'T1';
            ES.WrapperList[2].task.Task_Title__c = 'T2';
            ES.WrapperList[3].task.Task_Title__c = 'T3';
            ES.WrapperList[4].task.Task_Title__c = 'T4';
            ES.WrapperList[5].task.Task_Title__c = 'T5';
            ES.Apply_action();            
        Test.StartTest();
            ES.WrapperList[2].task.Link__c = false;
            ES.Apply_action();
            Tas = [select id,name,Task_Title__c,SOE__c,Stage_Level__c,Stage__c,Team__c,Stack_Owner_Name__c from task__c where SOE__c =: SOE.id and Stage__c =: i8.STAGE_PRE  order by Id_Before_Decimal__c,Id_After_Decimal__c];
            list<Dependency__c> DepList1 = new list<Dependency__c>();
            DepList1.add(SOEUtility.Dependency_Insert(i8.INTERNALDEP,tas[3].Id,tas[3].SOE__c,tas[1].Id,tas[1].SOE__c,i8.PREDECESSOR));
            DepList1.add(SOEUtility.Dependency_Insert(i8.INTERNALDEP,tas[1].Id,tas[1].SOE__c,tas[3].Id,tas[3].SOE__c,i8.SUCCESSOR));
            insert deplist1;
            tas[3].Dependency_Type__c = i8.INTERNALDEP;
            update tas[3];
            ES.Tasks();
            ES.WrapperList[2].task.Link__c = true;
            ES.Apply_action();
            ES.IDTExt = '1';
            ES.IDTExt1 = '1';
            ES.Down_Method();
       Test.StopTest();
            ES.IDTExt = '1';
            ES.IDTExt1 = '4';
            ES.UP_Method();
            ES.WrapperLIst = NULL;
            ES.UP_Method();
            ES.Down_Method();
            ES.Apply_action(); 
            ES.InsertDependency(null,null);
    }           
    Static testmethod void Edit_Stack_Cntrl5(){           
            SOE__c soe = [select id,SOE_Title__c from SOE__c where SOE_Title__c ='SOE Edit Stack 1'];     
            System.assertEquals(SOE.SOE_Title__c , 'SOE Edit Stack 1');
            list<task__c> Tas = [select id,name,Task_Title__c,SOE__c,ID_Text__c,Stage_Level__c,Stage__c,Team__c,Stack_Owner_Name__c from task__c where SOE__c =: SOE.id and Stage__c =: i8.STAGE_PRE order by Id_Before_Decimal__c,Id_After_Decimal__c];
            ApexPages.CurrentPage().getparameters().put('Id', TAS[0].Id);           
            SOE__c SOE1 = [select id,SOE_Title__c from SOE__c where SOE_Title__c ='SOE Edit Stack 2'];  
            System.assertEquals(SOE1.SOE_Title__c , 'SOE Edit Stack 2');
            list<task__c> Tas1 = [select id,name,Task_Title__c,SOE__c,ID_Text__c,Stage_Level__c,Stage__c,Team__c,Stack_Owner_Name__c from task__c where SOE__c =: SOE1.id and Stage__c =: i8.STAGE_PRE order by Id_Before_Decimal__c,Id_After_Decimal__c];
            list<Dependency__c> DepList1 = new list<Dependency__c>();
            DepList1.add(SOEUtility.Dependency_Insert(i8.EXTERNALDEP,tas[1].Id,tas[1].SOE__c,tas1[1].Id,tas1[1].SOE__c,i8.PREDECESSOR));
            DepList1.add(SOEUtility.Dependency_Insert(i8.EXTERNALDEP,tas1[1].Id,tas1[1].SOE__c,tas[1].Id,tas[1].SOE__c,i8.SUCCESSOR));
            insert deplist1;
        Test.StartTest();
            tas[1].Dependency_Type__c = i8.EXTERNALDEP;
            update tas[1];
            tas1[1].Dependency_Type__c = i8.EXTERNALDEP;
            update tas1[1];
            Edit_Stack_Cntrl ES = New Edit_Stack_Cntrl();
            ES.SelectAction ='Append';
            ES.selectRow =2;
            ES.Go_method(); 
            ES.WrapperList[1].task.Task_Title__c = 'T1';
            ES.WrapperList[2].task.Task_Title__c = 'T2';
            ES.Apply_action();
       Test.StopTest();
            ES.getTasks();
            ES.WrapperList[0].Check = true;
            ES.SelectAction = 'Move_Selected'; 
            ES.Selecttask ='1.4';
            ES.Go_method();
    }
    Static testmethod void Edit_Stack_Cntrl6(){
        Test.StartTest();
            SOE__c soe = [select id,SOE_Title__c from SOE__c where SOE_Title__c ='SOE Edit Stack 1'];     
            System.assertEquals(SOE.SOE_Title__c , 'SOE Edit Stack 1');
            list<task__c> Tas = [select id,name,Task_Title__c,SOE__c,ID_Text__c,Stage_Level__c,Stage__c,Team__c,Stack_Owner_Name__c from task__c where SOE__c =: SOE.id and Stage__c =: i8.STAGE_PRE order by Id_Before_Decimal__c,Id_After_Decimal__c];
            tas[0].Jump__c = true;
            tas[0].Status__c = tas[0].Status__c + i8.JUMP;
            update tas[0];
            User user1 = SOEUtility.USer_Insert('user--37--@gmail.com');
            Member__c member1 = [select id from Member__c where Email__c ='user--37--@gmail.com'];
            Role__c role = [select id from ROle__c where Reference_Role__c = 'Imp Manager' limit 1];
            SOE_Team_Member__c stm1 = SOEUtility.teammember_insert(member1.id,'Read',soe.id,role.id);
            ApexPages.CurrentPage().getparameters().put('Id', TAS[0].Id);  
            Edit_Stack_Cntrl ES = New Edit_Stack_Cntrl();
            ES.FromStackChanged();
            ES.selectaction = 'Append';
            ES.Go_Method();            
        Test.StopTest();
    }  
}