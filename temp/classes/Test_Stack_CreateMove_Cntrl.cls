@istest
Public class Test_Stack_CreateMove_Cntrl{
    Public static i8Constants i8 = new I8Constants();
    @testSetup static void setup() {
           SOEUtility.SystemSettings_Insert();
           Role__c  Role = SOEUtility.Role_Insert('Imp Manager');
           role = [select id,Reference_Role__c  from Role__c where Reference_Role__c = 'Imp Manager' limit 1];
           System.assertEquals(role.Reference_Role__c , 'Imp Manager');
    }
    Static testmethod void Stack_CreateMove_Cntrl(){
            Department__c service = SOEUtility.Dep_Insert('Service2');
            Role__c Role = [select id,Reference_Role__c  from Role__c where Reference_Role__c = 'Imp Manager' limit 1];
            SOE__c SOE = SOEUtility.SOE_Insert('SOE--1',service.Id,true,false,false,false);
            SOE__c SOE1 = SOEUtility.SOE_Insert('SOE--2',service.Id,false,true,false,false);
            System.assertEquals(SOE.SOE_Title__c , 'SOE--1');
            list<task__c> Tas = [select id,name,Task_Title__c,SOE__c,Id_Text__c,Is_Stack__c,Id_Before_Decimal__c,Stage_Level__c,Stage__c,Team__c,Owner__c from task__c where SOE__c =: SOE.id and Is_Stack__c = True order by Id_Before_Decimal__c];
        Test.StartTest();
            ApexPages.CurrentPage().getparameters().put('Id', SOE.Id);
            Stack_CreateMove_Cntrl Stack_Create = New Stack_CreateMove_Cntrl();
            Stack_Create.TargetStage = I8.STAGE_PRE;
            Stack_Create.TargetStack = Tas[0].Id_Text__c;
            ApexPages.CurrentPage().getparameters().put('days', '2');
            ApexPages.CurrentPage().getparameters().put('hours', '2');
            ApexPages.CurrentPage().getparameters().put('minutes', '2');
            ApexPages.CurrentPage().getparameters().put('tasktitle', 'T2');
            Stack_Create.CreateStack();
            Stack_Create.TargetStage = I8.STAGE_PRE;
            Stack_Create.TargetStack = Tas[0].Id_Text__c;
            ApexPages.CurrentPage().getparameters().put('days', '3');
            ApexPages.CurrentPage().getparameters().put('hours', '3');
            ApexPages.CurrentPage().getparameters().put('minutes', '3');
            ApexPages.CurrentPage().getparameters().put('tasktitle', 'T3');
            Stack_Create.CreateStack();
            List<Task__c> Tas1 = [select id,name,Task_Title__c,SOE__c,Id_Text__c,Is_Stack__c,Id_Before_Decimal__c,Stage_Level__c,Stage__c,Team__c,Owner__c from task__c where SOE__c =: SOE1.id and Is_Stack__c = True order by Id_Before_Decimal__c];
            ApexPages.CurrentPage().getparameters().put('Id', SOE1.Id);
            Stack_Create = New Stack_CreateMove_Cntrl();
            Stack_Create.TargetStage = I8.STAGE_IMP;
            Stack_Create.TargetStack = Tas1[0].Id_Text__c;
            ApexPages.CurrentPage().getparameters().put('days', '');
            ApexPages.CurrentPage().getparameters().put('hours', '');
            ApexPages.CurrentPage().getparameters().put('minutes', '');
            ApexPages.CurrentPage().getparameters().put('tasktitle', '');
            Stack_Create.CreateStack();
            ApexPages.currentPage().getparameters().put('Id',SOE.Id);
            ApexPages.currentPage().getparameters().put('page','move');
            Stack_create = New Stack_CreateMove_cntrl();
            Stack_Create.SourceStage = I8.STAGE_IMP;
            Stack_Create.SourceStack = String.valueOf(Tas1[0].Id_Before_Decimal__c);
            Stack_Create.TargetStage = I8.STAGE_IMP;
            Stack_Create.TargetStack = String.valueOf(Tas1[0].Id_Before_Decimal__c);
            Stack_create.moveStack();
            Stack_Create.SourceStage = I8.STAGE_POST;
            Stack_Create.TargetStage = I8.STAGE_POST;
            Stack_create.moveStack();
            ApexPages.CurrentPage().getparameters().put('Id', SOE1.Id);
            Stack_Create = New Stack_CreateMove_Cntrl();
            Stack_Create.TargetStage = I8.STAGE_IMP;
            Stack_Create.TargetStack = Tas1[0].Id_Text__c;
            ApexPages.CurrentPage().getparameters().put('days', '1');
            ApexPages.CurrentPage().getparameters().put('hours', '1');
            ApexPages.CurrentPage().getparameters().put('minutes', '1');
            ApexPages.CurrentPage().getparameters().put('tasktitle', 'ttt1');
            Stack_Create.BAValue = '-';
            Stack_Create.CreateStack();
            Tas = [select id,name,Task_Title__c,SOE__c,Id_Text__c,Is_Stack__c,Id_Before_Decimal__c,Stage_Level__c,Stage__c,Team__c,Owner__c from task__c where SOE__c =: SOE.id and Is_Stack__c = True order by Id_Before_Decimal__c];
            List<Task__c> Stacklist = [select id,name from Task__c where Id_Before_Decimal__c =: Tas[0].Id_Before_Decimal__c and Stage_Level__c =: Tas[0].Stage_Level__c and Soe__c =: Tas[0].SOE__c];
            ApexPages.CurrentPage().getparameters().put('SOEId',soe.Id);
            ApexPages.CurrentPage().getparameters().put('Id', Stacklist[1].Id);
            Add_Task_cntrl Add = new Add_Task_cntrl ();
            ApexPages.CurrentPage().getparameters().put('days', '2');
            ApexPages.CurrentPage().getparameters().put('hours', '2');
            ApexPages.CurrentPage().getparameters().put('minutes', '2');
            ApexPages.CurrentPage().getparameters().put('tasktitle', 'T3');
            Add.NewTask.Link__c = true;
            Add.CreateTask();
            ApexPages.currentPage().getparameters().put('Id',SOE.Id);
            ApexPages.currentPage().getparameters().put('page','move');
            Stack_create = New Stack_CreateMove_cntrl();
            Stack_Create.SourceStage = I8.STAGE_PRE;
            Stack_Create.SourceStack = String.valueOf(Tas[2].Id_Before_Decimal__c);
            Stack_Create.TargetStage = I8.STAGE_PRE;
            Stack_Create.TargetStack = String.valueOf(Tas[1].Id_Before_Decimal__c);
            Stack_create.moveStack();
        Test.StopTest();
            Stack_Create.SourceStage = I8.STAGE_PRE;
            Stack_Create.SourceStack = String.valueOf(Tas[0].Id_Before_Decimal__c);
            Stack_Create.TargetStage = I8.STAGE_PRE;
            Stack_Create.TargetStack = String.valueOf(Tas[1].Id_Before_Decimal__c);
            Stack_create.moveStack();
            Stack_Create.SourceStage = I8.STAGE_PRE;
            Stack_Create.SourceStack = String.valueOf(Tas[1].Id_Before_Decimal__c);
            Stack_Create.TargetStage = I8.STAGE_PRE;
            Stack_Create.TargetStack = String.valueOf(Tas[2].Id_Before_Decimal__c);
            Stack_create.BAValue = '-';
            Stack_create.moveStack();
            Stack_Create.SourceStage = I8.STAGE_PRE;
            Stack_Create.SourceStack = String.valueOf(Tas[2].Id_Before_Decimal__c);
            Stack_Create.TargetStage = I8.STAGE_PRE;
            Stack_Create.TargetStack = String.valueOf(Tas[1].Id_Before_Decimal__c);
            Stack_create.BAValue = '-';
            Stack_create.moveStack();
            Tas[0].status__c = I8.STATUS_RUNNING;
            Update Tas[0];
            User user1 = SOEUtility.USer_Insert('user--33--@gmail.com');
            Member__c member1 = [select id from Member__c where Email__c ='user--33--@gmail.com'];
            SOE_Team_Member__c stm1 = SOEUtility.teammember_insert(member1.id,'Read',soe.id,role.id);
            Stack_create = New Stack_CreateMove_cntrl();
            Stack_Create.SourceStage = I8.STAGE_PRE;
            Stack_Create.SourceStack = String.valueOf(Tas[0].Id_Before_Decimal__c);
            Stack_Create.TargetStage = I8.STAGE_PRE;
            Stack_Create.TargetStack = String.valueOf(Tas[1].Id_Before_Decimal__c);
            Stack_create.BAValue = '-';
            Stack_create.moveStack();
    }
     Static testmethod void Stack_CreateMove_Cntrl1(){
            Department__c service = SOEUtility.Dep_Insert('Service2');
            Role__c Role = [select id,Reference_Role__c  from Role__c where Reference_Role__c = 'Imp Manager' limit 1];
            SOE__c SOE = SOEUtility.SOE_Insert('SOE--1',service.Id,true,true,true,false,false);
            System.assertEquals(SOE.SOE_Title__c , 'SOE--1');
            list<task__c> Tas = [select id,name,Task_Title__c,SOE__c,Id_Text__c,Is_Stack__c,Id_Before_Decimal__c,Stage_Level__c,Stage__c,Team__c,Owner__c from task__c where SOE__c =: SOE.id and Is_Stack__c = True order by Id_Before_Decimal__c];
        Test.StartTest();
            ApexPages.CurrentPage().getparameters().put('Id', SOE.Id);
            Stack_CreateMove_Cntrl Stack_Create = New Stack_CreateMove_Cntrl();
            Stack_Create.TargetStageLIst();
            STack_Create.taskobj.Stage_Level__c = i8.CONTEXT_BO;
            Stack_Create.StageList();
            Stack_Create.openCancel();
            Stack_Create.moveStack();
            Stack_Create.CreateSTack();
        Test.StopTest();
    }
}