@istest
private class Test_Modify_Task_cntrl{
    i8Constants i8 = new I8Constants();
    @testSetup static void setup() {
           SOEUtility.SystemSettings_Insert();
        Department__c service = SOEUtility.Dep_Insert('Service2');
        Role__c  Role = SOEUtility.Role_Insert('Imp Manager');
        SOE__c SOE = SOEUtility.SOE_Insert('Modify SOE1',service.id,true,true,false,false);  
        System.assertEquals(SOE.SOE_Title__c , 'Modify SOE1');       
    }
    Static testmethod void Modify_Task_1(){   
        SOE__c soe = [select id,SOE_Title__c from SOE__c where SOE_Title__c ='Modify SOE1'];     
        System.assertEquals(SOE.SOE_Title__c , 'Modify SOE1');
        List<Task__c> TaskList = [select id,status__c,Task_Title__c  from Task__C where SOE__c =: SOE.Id order by Id_Before_Decimal__c,Id_After_decimal__c];
        ApexPages.CurrentPage().getparameters().put('SId', SOE.Id);
        ApexPages.CurrentPage().getparameters().put('page', 'drop');
        ApexPages.CurrentPage().getparameters().put('level', 'Implementation');
        Modify_Task_cntrl Modify = New Modify_Task_cntrl ();
        Modify.getTasks();
        Test.StartTest(); 
        Modify.CancelTask();
        Modify.SelectedStage = 'Pre';
        Modify.SelectedStack = '1';
        Modify.SelectedTask = Tasklist[0].Id;
        Modify.StageChange();
        ApexPages.CurrentPage().getparameters().put('page', 'edit');
        ApexPages.CurrentPage().getparameters().put('id', TaskList[1].Id);
        Modify.getTasks();
        Modify.SaveTAsk();
        Modify.BeforeTAsk();
        Modify.AfterTAsk();
        Modify.DeleteTAsk();
        Modify.OpenDependency();
        Modify.CancelTask();
        Modify.TaskSuspend();
        Modify.ForceCompleteTask();
        Modify.OpenDocuments();
        // for first task in list
        ApexPages.CurrentPage().getparameters().put('page', 'edit');
        ApexPages.CurrentPage().getparameters().put('id', TaskList[0].Id);
        Modify.getTasks();
        // for last task in list
        ApexPages.CurrentPage().getparameters().put('page', 'edit');
        Task__c t1 = TaskList[TaskList.size()-1];
        t1.Add_Comments__c = 'hi this is test comments';
        t1.Comments__c = '';
        update t1;
        ApexPages.CurrentPage().getparameters().put('id', t1.Id);
        ApexPages.CurrentPage().getparameters().put('days', '');
        ApexPages.CurrentPage().getparameters().put('hours', '');
        ApexPages.CurrentPage().getparameters().put('minutes', '');
        Modify.SaveTask();
        Modify.getTasks();
        Modify.CurTask.Add_Comments__c = 'Unit Test';
        Modify.AddNotes();
        //drop task
        ApexPages.CurrentPage().getparameters().put('SOEId',soe.Id);
        ApexPages.CurrentPage().getparameters().put('id', TaskList[0].Id);
        Add_Task_cntrl add = new Add_Task_cntrl ();
        ApexPages.CurrentPage().getparameters().put('days', '2');
        ApexPages.CurrentPage().getparameters().put('hours', '2');
        ApexPages.CurrentPage().getparameters().put('minutes', '2');
        ApexPages.CurrentPage().getparameters().put('tasktitle', 'task1.1');
        add.CreateTask();
        TaskList = [select id,status__c,Task_Title__c,Id_Text__c  from Task__C where SOE__c =: SOE.Id order by Id_Before_Decimal__c,Id_After_decimal__c];
     ApexPages.CurrentPage().getparameters().put('id', TaskList[1].Id);
        ApexPages.CurrentPage().getparameters().put('SId', SOE.Id);
        ApexPages.CurrentPage().getparameters().put('page', 'edit');
        ApexPages.CurrentPage().getparameters().put('level', 'Implementation');
        Modify_Task_cntrl Modify1 = New Modify_Task_cntrl ();
        Modify1.getTasks();
        Modify1.SelectedTask ='0'  ;
        Modify1.DropTAsk();
        Modify1.SelectedStage = 'Pre';
        Modify1.StageChange();
        Modify1.SelectedTask = TaskList[1].Id_Text__c;
        Modify1.DropTAsk();
        Modify1.review_comments = 'Unit Test';
        Modify1.AddNotes1();
     Test.StopTest();    
        Modify1.review_comments = 'Unit Test1';
        Modify1.AddNotes1();
        Modify1.CurTask.time_BOund__c = system.now();
        Modify1.SaveTask();
    }
    Static testmethod void Modify_Task_Coomunication(){
        SOE__c soe = [select id,SOE_Title__c from SOE__c where SOE_Title__c ='Modify SOE1'];     
        System.assertEquals(SOE.SOE_Title__c , 'Modify SOE1');
        MIS__c MIS = SOEUtility.MIS_Insert('MIS');
        List<Task__c> TaskList = [select id,status__c,Task_Title__c  from Task__C where SOE__c =: SOE.Id order by Id_Before_Decimal__c,Id_After_decimal__c];
        ApexPages.CurrentPage().getparameters().put('MId', MIS.Id);
        Modify_Task_cntrl Modify = New Modify_Task_cntrl ();
        Modify.CancelTask();
        ApexPages.CurrentPage().getparameters().put('SId', SOE.Id);
        ApexPages.CurrentPage().getparameters().put('page', 'edit');
        Modify = New Modify_Task_cntrl ();
        Task__c t1 = TaskList[1];
        t1.When_Task_Ready__c = true;
        t1.Jump__c = true;
        update t1;
        Test.StartTest();
        ApexPages.CurrentPage().getparameters().put('id', t1.Id);
        Modify.getTasks();
        ApexPages.CurrentPage().getparameters().put('days', '2');
        ApexPages.CurrentPage().getparameters().put('hours', '2');
        ApexPages.CurrentPage().getparameters().put('minutes', '2');
        Modify.SaveTask();
        t1.Task_Completed__c = true;
        update t1;
        ApexPages.CurrentPage().getparameters().put('id', t1.Id);
        Modify.getTasks();
        Modify.CancelPopUp();
        ApexPages.CurrentPage().getparameters().put('SOEId',soe.Id);
        ApexPages.CurrentPage().getparameters().put('id', TaskList[0].Id);
        Add_Task_cntrl add = new Add_Task_cntrl ();
        ApexPages.CurrentPage().getparameters().put('days', '2');
        ApexPages.CurrentPage().getparameters().put('hours', '2');
        ApexPages.CurrentPage().getparameters().put('minutes', '2');
        ApexPages.CurrentPage().getparameters().put('tasktitle', 'task1.1');
        add.CreateTask();
        TaskList = [select id,status__c,Task_Title__c  from Task__C where SOE__c =: SOE.Id order by Id_Before_Decimal__c,Id_After_decimal__c];
        Task__c t2= TaskList[1];
        ApexPages.CurrentPage().getparameters().put('id', t2.Id);
        Modify.getTasks();
        Modify.ActiveTAskId = t2.Id;
        Modify.ExecuteTask(); 
        user user1 = SOEUtility.user_insert('user--16@gmail.com');
        Member__c member1 = [select id from Member__c where Email__c ='user--16@gmail.com'];
        Team__c Team1=SOEUtility.Team_insert('sap');
        Team_Member__c Teammember1=SOEUtility.Teammember_insert(member1.id,Team1.id);
        Incident__c  inc2=SOEUtility.Incident_insert(SOE.id,t2.id,'Suspended','Open','Task',member1.id);        
        Modify.TaskReExecute();
        Modify.CompleteTask1();
     Test.StopTest();    
    }
    Static testmethod void Modify_Task_3(){   
        SOE__c soe = [select id,SOE_Title__c from SOE__c where SOE_Title__c ='Modify SOE1'];     
        System.assertEquals(SOE.SOE_Title__c , 'Modify SOE1');
        test.starttest();
        List<Task__c> TaskList = [select id,Id_Text__c,status__c,Task_Title__c  from Task__C where SOE__c =: SOE.Id order by Id_Before_Decimal__c,Id_After_decimal__c];
        soe.QA_review_Required__c = true;
        soe.QA_review__c = 'In progress';
        update soe;
        User user1 = SOEUtility.USer_Insert('user--26--@gmail.com');
        Member__c member1 = [select id from Member__c where Email__c ='user--26--@gmail.com'];
        Role__c role = [select id from ROle__c where Reference_Role__c = 'Imp Manager' limit 1];
        SOE_Team_Member__c stm1 = SOEUtility.teammember_insert(member1.id,'Read',soe.id,role.id);
        ApexPages.CurrentPage().getparameters().put('SId', SOE.Id);
        ApexPages.CurrentPage().getparameters().put('SOEId',soe.Id);
        ApexPages.CurrentPage().getparameters().put('id', TaskList[0].Id);
        Add_Task_cntrl add = new Add_Task_cntrl ();
        ApexPages.CurrentPage().getparameters().put('days', '2');
        ApexPages.CurrentPage().getparameters().put('hours', '2');
        ApexPages.CurrentPage().getparameters().put('minutes', '2');
        ApexPages.CurrentPage().getparameters().put('tasktitle', 'task1.1');
        add.CreateTask();        
        TaskList = [select id,status__c,Id_Text__c,Task_Title__c,Id_Before_Decimal__c,Id_After_Decimal__c from Task__C where SOE__c =: SOE.Id order by Id_Before_Decimal__c,Id_After_decimal__c];
        Modify_Task_cntrl Modify = New Modify_Task_cntrl (); 
       
      
        List<Task__c> TaskInsertList = New List<Task__c>();
        For(Integer i=0; i<1100; i++){
            Task__c Tas = New Task__c(Task_Title__c = 'Task'+i, Stage_Level__c = 'Implementation',Stage__c = 'Pre', SOE__c = SOE.Id, Status__c = 'Build', Id_Text__c = TaskList[0].Id_Before_Decimal__c +'.'+ (TaskList[0].Id_After_Decimal__c+i+1),Days__c = 0,Hours__c =0, Minutes__c =5 );
            TaskInsertList.add(tas);
        }
        Upsert TaskInsertList;
        Modify.DropTAsk();
        Modify.SelectedStage = 'Pre';
        Modify.SelectedStack ='1';
        Modify.SelectedTask = TaskList[1].Id;
        Modify.taskobj.Stage_Level__c = 'Implementation';
        Modify.DropTAsk();
        Modify.SelectedStage = 'Pre';
        Modify.SelectedStack ='1';
        Modify.SelectedTask = '0';
        Modify.getStackTaskList();
        Modify.SelectedStack ='1';
        Modify.SelectedTask = 'more';
        Modify.Modify();
        test.stoptest();
    }
    Static testmethod void Modify_Task_4(){ 
        test.starttest();  
        user user1 = SOEUtility.user_insert('user--16@gmail.com');
        Member__c member1 = [select id from Member__c where Email__c ='user--16@gmail.com'];
        SOE__c soe = [select id,SOE_Title__c from SOE__c where SOE_Title__c ='Modify SOE1'];     
        System.assertEquals(SOE.SOE_Title__c , 'Modify SOE1');
        MIS__c mis = SOEUtility.MIS_Insert('MIS insetrt1');
        List<Task__c> TaskList = [select id,Id_Text__c,status__c,Task_Title__c  from Task__C where SOE__c =: SOE.Id order by Id_Before_Decimal__c,Id_After_decimal__c];
        ApexPages.CurrentPage().getparameters().put('id', TaskList[0].Id);
        ApexPages.CurrentPage().getparameters().put('MId', mis.id);
        ApexPages.CurrentPage().getparameters().put('level', 'Implementation');
        ApexPages.CurrentPage().getparameters().put('Sid', soe.id);
        ApexPages.CurrentPage().getparameters().put('page', 'droptask');
        Modify_Task_cntrl Modify = New Modify_Task_cntrl ();        
        Modify.openDocuments();
        Modify.CancelTask();
        Modify.OpenDependency();      
        Modify.ActiveTaskId = tasklist[1].Id;
        MOdify.ExecuteTask();
        Modify.ForceCompleteTask();
        Modify.TaskSuspend();
        Modify.taskobj.Stage_Level__c = 'Implementation';
        Modify.StagesList();
        Modify.SelectedStage = 'Imp';
        Modify.StageChange();
        ApexPages.CurrentPage().getparameters().put('id', TaskList[2].Id);
        ApexPages.CurrentPage().getparameters().put('page', 'edit');
        ApexPages.CurrentPage().getparameters().put('level', 'Implementation');
        ApexPages.CurrentPage().getparameters().put('Sid', soe.id);
        Modify = New Modify_Task_cntrl (); 
        Modify.active = 'Completed';
        Modify.CurTask.Task_Completed__c = true;
        Modify.POpUP();
        Modify.Members.add(member1.id);
        Modify.UpdateMembers();
        Modify.active = 'Ready';
        Modify.UpdateMembers();
        Modify.active = 'Milestone';
        Modify.SaveTask();
        Modify.PopUp();
        Modify.UpdateMembers();
        Modify.SaveTask();
        Test.StopTest();
     }
     Static testmethod void Modify_Task_5(){ 
        Test.StartTest();  
        SOE__c soe = [select id,SOE_Title__c from SOE__c where SOE_Title__c ='Modify SOE1'];     
        System.assertEquals(SOE.SOE_Title__c , 'Modify SOE1');
        List<Task__c> TaskList = [select id,status__c,Task_Title__c  from Task__C where SOE__c =: SOE.Id order by Id_Before_Decimal__c,Id_After_decimal__c];
        ApexPages.CurrentPage().getparameters().put('SId', SOE.Id);
        ApexPages.CurrentPage().getparameters().put('page', 'edit');
        ApexPages.CurrentPage().getparameters().put('level', 'Implementation');
        ApexPages.CurrentPage().getparameters().put('id', TaskList[1].Id);
        Modify_Task_cntrl Modify = New Modify_Task_cntrl ();
        modify.CurTask.TAsk_Title__c = null;
        modify.SaveTask();
        modify.CurTask = null;
        modify.SaveTask();
        modify.BeforeTask();
        Modify.AfterTask();
        Modify.ExecuteTask();
        Modify.COmpleteTask1();
        Modify.Deletetask();
        Modify.taskobj.Stage_Level__c = 'Backout';
        Modify.StagesLIst();
        Modify.TaskReExecute();
        Test.STopTest();
    }
}